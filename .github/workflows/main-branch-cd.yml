# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: build and delopy test environment

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-20.04
    
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache-dependencies
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install project dependencies
        run: yarn --prefer-offline
      - name: Build project
        run: yarn build
        env:
          CI: "false"
#           
#     deploy
      - name: remove app
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: rm -rf ${{ secrets.REMOTE_APP_TARGET }}
      - name: upload app
        # You may pin to the exact commit or the version.
        uses: easingthemes/ssh-deploy@191986574c0735ffad7ae1a297a414d6e6f95375
  #       uses: easingthemes/ssh-deploy@v2.1.5
        with:
          # Private Key
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          # Remote host
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          # Remote user
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          # Source directory
          SOURCE: public/
          # Target directory, example /home/**/web/
          TARGET: ${{ secrets.REMOTE_APP_TARGET }}
      # Invalidate app in Cloudfront
      - name: Invalidate panel in cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.3
        env:
          DISTRIBUTION: ${{ secrets.APP_CF_ID }}
          PATHS: '/*'
          AWS_REGION: 'ap-northeast-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}